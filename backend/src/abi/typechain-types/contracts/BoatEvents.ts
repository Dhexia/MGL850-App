/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BoatEvents {
  export type EventDataStruct = {
    kind: BigNumberish;
    timestamp: BigNumberish;
    author: AddressLike;
    ipfsHash: string;
  };

  export type EventDataStructOutput = [
    kind: bigint,
    timestamp: bigint,
    author: string,
    ipfsHash: string
  ] & { kind: bigint; timestamp: bigint; author: string; ipfsHash: string };
}

export interface BoatEventsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEvent"
      | "eventByIndex"
      | "eventCount"
      | "passport"
      | "roles"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BoatEventLogged"): EventFragment;

  encodeFunctionData(
    functionFragment: "addEvent",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "eventByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "passport", values?: undefined): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "passport", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
}

export namespace BoatEventLoggedEvent {
  export type InputTuple = [
    boatId: BigNumberish,
    kind: BigNumberish,
    author: AddressLike,
    ipfsHash: string
  ];
  export type OutputTuple = [
    boatId: bigint,
    kind: bigint,
    author: string,
    ipfsHash: string
  ];
  export interface OutputObject {
    boatId: bigint;
    kind: bigint;
    author: string;
    ipfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BoatEvents extends BaseContract {
  connect(runner?: ContractRunner | null): BoatEvents;
  waitForDeployment(): Promise<this>;

  interface: BoatEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEvent: TypedContractMethod<
    [boatId: BigNumberish, kind: BigNumberish, ipfsHash: string],
    [void],
    "nonpayable"
  >;

  eventByIndex: TypedContractMethod<
    [boatId: BigNumberish, index: BigNumberish],
    [BoatEvents.EventDataStructOutput],
    "view"
  >;

  eventCount: TypedContractMethod<[boatId: BigNumberish], [bigint], "view">;

  passport: TypedContractMethod<[], [string], "view">;

  roles: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEvent"
  ): TypedContractMethod<
    [boatId: BigNumberish, kind: BigNumberish, ipfsHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eventByIndex"
  ): TypedContractMethod<
    [boatId: BigNumberish, index: BigNumberish],
    [BoatEvents.EventDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "eventCount"
  ): TypedContractMethod<[boatId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "passport"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BoatEventLogged"
  ): TypedContractEvent<
    BoatEventLoggedEvent.InputTuple,
    BoatEventLoggedEvent.OutputTuple,
    BoatEventLoggedEvent.OutputObject
  >;

  filters: {
    "BoatEventLogged(uint256,uint8,address,string)": TypedContractEvent<
      BoatEventLoggedEvent.InputTuple,
      BoatEventLoggedEvent.OutputTuple,
      BoatEventLoggedEvent.OutputObject
    >;
    BoatEventLogged: TypedContractEvent<
      BoatEventLoggedEvent.InputTuple,
      BoatEventLoggedEvent.OutputTuple,
      BoatEventLoggedEvent.OutputObject
    >;
  };
}
